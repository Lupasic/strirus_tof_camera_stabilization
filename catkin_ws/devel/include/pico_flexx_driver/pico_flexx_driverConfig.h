//#line 2 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the pico_flexx_driver package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __pico_flexx_driver__PICO_FLEXX_DRIVERCONFIG_H__
#define __pico_flexx_driver__PICO_FLEXX_DRIVERCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace pico_flexx_driver
{
  class pico_flexx_driverConfigStatics;

  class pico_flexx_driverConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(pico_flexx_driverConfig &config, const pico_flexx_driverConfig &max, const pico_flexx_driverConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const pico_flexx_driverConfig &config1, const pico_flexx_driverConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, pico_flexx_driverConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const pico_flexx_driverConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, pico_flexx_driverConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const pico_flexx_driverConfig &config) const = 0;
      virtual void getValue(const pico_flexx_driverConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T pico_flexx_driverConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (pico_flexx_driverConfig::* field);

      virtual void clamp(pico_flexx_driverConfig &config, const pico_flexx_driverConfig &max, const pico_flexx_driverConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const pico_flexx_driverConfig &config1, const pico_flexx_driverConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, pico_flexx_driverConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const pico_flexx_driverConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, pico_flexx_driverConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const pico_flexx_driverConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const pico_flexx_driverConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, pico_flexx_driverConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, pico_flexx_driverConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<pico_flexx_driverConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(pico_flexx_driverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("use_case"==(*_i)->name){use_case = boost::any_cast<int>(val);}
        if("exposure_mode"==(*_i)->name){exposure_mode = boost::any_cast<int>(val);}
        if("exposure_mode_stream2"==(*_i)->name){exposure_mode_stream2 = boost::any_cast<int>(val);}
        if("exposure_time"==(*_i)->name){exposure_time = boost::any_cast<int>(val);}
        if("exposure_time_stream2"==(*_i)->name){exposure_time_stream2 = boost::any_cast<int>(val);}
        if("max_noise"==(*_i)->name){max_noise = boost::any_cast<double>(val);}
        if("range_factor"==(*_i)->name){range_factor = boost::any_cast<double>(val);}
        if("filter_level"==(*_i)->name){filter_level = boost::any_cast<int>(val);}
      }
    }

    int use_case;
int exposure_mode;
int exposure_mode_stream2;
int exposure_time;
int exposure_time_stream2;
double max_noise;
double range_factor;
int filter_level;

    bool state;
    std::string name;

    
}groups;



//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int use_case;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int exposure_mode;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int exposure_mode_stream2;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int exposure_time;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int exposure_time_stream2;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_noise;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double range_factor;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int filter_level;
//#line 228 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("pico_flexx_driverConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const pico_flexx_driverConfig &__max__ = __getMax__();
      const pico_flexx_driverConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const pico_flexx_driverConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const pico_flexx_driverConfig &__getDefault__();
    static const pico_flexx_driverConfig &__getMax__();
    static const pico_flexx_driverConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const pico_flexx_driverConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void pico_flexx_driverConfig::ParamDescription<std::string>::clamp(pico_flexx_driverConfig &config, const pico_flexx_driverConfig &max, const pico_flexx_driverConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class pico_flexx_driverConfigStatics
  {
    friend class pico_flexx_driverConfig;

    pico_flexx_driverConfigStatics()
    {
pico_flexx_driverConfig::GroupDescription<pico_flexx_driverConfig::DEFAULT, pico_flexx_driverConfig> Default("Default", "", 0, 0, true, &pico_flexx_driverConfig::groups);
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_case = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_case = 9;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_case = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(pico_flexx_driverConfig::AbstractParamDescriptionConstPtr(new pico_flexx_driverConfig::ParamDescription<int>("use_case", "int", 1, "Use cases for the sensor", "{'enum_description': 'possible use cases', 'enum': [{'srcline': 8, 'description': '8+1, 5  FPS, max exposure time 2000 micro seconds', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'MODE_9_5FPS_2000'}, {'srcline': 9, 'description': '8+1, 10 FPS, max exposure time 1000 micro seconds', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'MODE_9_10FPS_1000'}, {'srcline': 10, 'description': '8+1, 15 FPS, max exposure time  700 micro seconds', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'MODE_9_15FPS_700'}, {'srcline': 11, 'description': '8+1, 25 FPS, max exposure time  450 micro seconds', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'MODE_9_25FPS_450'}, {'srcline': 12, 'description': '4+1, 35 FPS, max exposure time  600 micro seconds', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'MODE_5_35FPS_600'}, {'srcline': 13, 'description': '4+1, 45 FPS, max exposure time  500 micro seconds', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'MODE_5_45FPS_500'}, {'srcline': 14, 'description': 'Mixed mode: 30/5 FPS, max exposure time  300/1300 micro seconds', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'MODE_MIXED_30_5'}, {'srcline': 15, 'description': 'Mixed mode: 50/5 FPS, max exposure time  250/1000 micro seconds', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'MODE_MIXED_50_5'}, {'srcline': 16, 'description': '5 FPS, Low_Noise_Extended', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'Low_Noise_Extended'}, {'srcline': 17, 'description': '45 FPS, custom filter level', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 9, 'ctype': 'int', 'type': 'int', 'name': 'Fast_Acquisition'}]}", &pico_flexx_driverConfig::use_case)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(pico_flexx_driverConfig::AbstractParamDescriptionConstPtr(new pico_flexx_driverConfig::ParamDescription<int>("use_case", "int", 1, "Use cases for the sensor", "{'enum_description': 'possible use cases', 'enum': [{'srcline': 8, 'description': '8+1, 5  FPS, max exposure time 2000 micro seconds', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'MODE_9_5FPS_2000'}, {'srcline': 9, 'description': '8+1, 10 FPS, max exposure time 1000 micro seconds', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'MODE_9_10FPS_1000'}, {'srcline': 10, 'description': '8+1, 15 FPS, max exposure time  700 micro seconds', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'MODE_9_15FPS_700'}, {'srcline': 11, 'description': '8+1, 25 FPS, max exposure time  450 micro seconds', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'MODE_9_25FPS_450'}, {'srcline': 12, 'description': '4+1, 35 FPS, max exposure time  600 micro seconds', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'MODE_5_35FPS_600'}, {'srcline': 13, 'description': '4+1, 45 FPS, max exposure time  500 micro seconds', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'MODE_5_45FPS_500'}, {'srcline': 14, 'description': 'Mixed mode: 30/5 FPS, max exposure time  300/1300 micro seconds', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'MODE_MIXED_30_5'}, {'srcline': 15, 'description': 'Mixed mode: 50/5 FPS, max exposure time  250/1000 micro seconds', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'MODE_MIXED_50_5'}, {'srcline': 16, 'description': '5 FPS, Low_Noise_Extended', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'Low_Noise_Extended'}, {'srcline': 17, 'description': '45 FPS, custom filter level', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 9, 'ctype': 'int', 'type': 'int', 'name': 'Fast_Acquisition'}]}", &pico_flexx_driverConfig::use_case)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_mode = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_mode = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_mode = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(pico_flexx_driverConfig::AbstractParamDescriptionConstPtr(new pico_flexx_driverConfig::ParamDescription<int>("exposure_mode", "int", 2, "Exposure mode for the sensor", "{'enum_description': 'Possible exposure modes', 'enum': [{'srcline': 20, 'description': 'Manual exposure mode', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'MANUAL'}, {'srcline': 21, 'description': 'Automatic exposure mode', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'AUTOMATIC'}]}", &pico_flexx_driverConfig::exposure_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(pico_flexx_driverConfig::AbstractParamDescriptionConstPtr(new pico_flexx_driverConfig::ParamDescription<int>("exposure_mode", "int", 2, "Exposure mode for the sensor", "{'enum_description': 'Possible exposure modes', 'enum': [{'srcline': 20, 'description': 'Manual exposure mode', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'MANUAL'}, {'srcline': 21, 'description': 'Automatic exposure mode', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'AUTOMATIC'}]}", &pico_flexx_driverConfig::exposure_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_mode_stream2 = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_mode_stream2 = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_mode_stream2 = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(pico_flexx_driverConfig::AbstractParamDescriptionConstPtr(new pico_flexx_driverConfig::ParamDescription<int>("exposure_mode_stream2", "int", 4, "Exposure mode for the sensor (stream 2)", "{'enum_description': 'Possible exposure modes', 'enum': [{'srcline': 20, 'description': 'Manual exposure mode', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'MANUAL'}, {'srcline': 21, 'description': 'Automatic exposure mode', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'AUTOMATIC'}]}", &pico_flexx_driverConfig::exposure_mode_stream2)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(pico_flexx_driverConfig::AbstractParamDescriptionConstPtr(new pico_flexx_driverConfig::ParamDescription<int>("exposure_mode_stream2", "int", 4, "Exposure mode for the sensor (stream 2)", "{'enum_description': 'Possible exposure modes', 'enum': [{'srcline': 20, 'description': 'Manual exposure mode', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'MANUAL'}, {'srcline': 21, 'description': 'Automatic exposure mode', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'AUTOMATIC'}]}", &pico_flexx_driverConfig::exposure_mode_stream2)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_time = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_time = 2000;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_time = 1000;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(pico_flexx_driverConfig::AbstractParamDescriptionConstPtr(new pico_flexx_driverConfig::ParamDescription<int>("exposure_time", "int", 8, "Exposure time", "", &pico_flexx_driverConfig::exposure_time)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(pico_flexx_driverConfig::AbstractParamDescriptionConstPtr(new pico_flexx_driverConfig::ParamDescription<int>("exposure_time", "int", 8, "Exposure time", "", &pico_flexx_driverConfig::exposure_time)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_time_stream2 = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_time_stream2 = 2000;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_time_stream2 = 1000;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(pico_flexx_driverConfig::AbstractParamDescriptionConstPtr(new pico_flexx_driverConfig::ParamDescription<int>("exposure_time_stream2", "int", 16, "Exposure time (stream 2)", "", &pico_flexx_driverConfig::exposure_time_stream2)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(pico_flexx_driverConfig::AbstractParamDescriptionConstPtr(new pico_flexx_driverConfig::ParamDescription<int>("exposure_time_stream2", "int", 16, "Exposure time (stream 2)", "", &pico_flexx_driverConfig::exposure_time_stream2)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_noise = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_noise = 0.1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_noise = 0.07;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(pico_flexx_driverConfig::AbstractParamDescriptionConstPtr(new pico_flexx_driverConfig::ParamDescription<double>("max_noise", "double", 32, "Max allowed noise", "", &pico_flexx_driverConfig::max_noise)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(pico_flexx_driverConfig::AbstractParamDescriptionConstPtr(new pico_flexx_driverConfig::ParamDescription<double>("max_noise", "double", 32, "Max allowed noise", "", &pico_flexx_driverConfig::max_noise)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.range_factor = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.range_factor = 7.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.range_factor = 2.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(pico_flexx_driverConfig::AbstractParamDescriptionConstPtr(new pico_flexx_driverConfig::ParamDescription<double>("range_factor", "double", 64, "Range of factor times standard deviation arround mean", "", &pico_flexx_driverConfig::range_factor)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(pico_flexx_driverConfig::AbstractParamDescriptionConstPtr(new pico_flexx_driverConfig::ParamDescription<double>("range_factor", "double", 64, "Range of factor times standard deviation arround mean", "", &pico_flexx_driverConfig::range_factor)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.filter_level = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.filter_level = 256;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.filter_level = 200;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(pico_flexx_driverConfig::AbstractParamDescriptionConstPtr(new pico_flexx_driverConfig::ParamDescription<int>("filter_level", "int", 128, "Filter level", "{'enum_description': 'Possible filter levels', 'enum': [{'srcline': 26, 'description': 'Turn off all filtering of the data (validation will still be enabled)', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Off'}, {'srcline': 27, 'description': 'Standard settings for older cameras', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 200, 'ctype': 'int', 'type': 'int', 'name': 'Legacy'}, {'srcline': 28, 'description': 'Enable all filters that are available for this camera', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 255, 'ctype': 'int', 'type': 'int', 'name': 'Full'}, {'srcline': 29, 'description': 'Value returned by getFilterLevel if the processing parameters differ from all of the presets', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 256, 'ctype': 'int', 'type': 'int', 'name': 'Custom'}]}", &pico_flexx_driverConfig::filter_level)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(pico_flexx_driverConfig::AbstractParamDescriptionConstPtr(new pico_flexx_driverConfig::ParamDescription<int>("filter_level", "int", 128, "Filter level", "{'enum_description': 'Possible filter levels', 'enum': [{'srcline': 26, 'description': 'Turn off all filtering of the data (validation will still be enabled)', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Off'}, {'srcline': 27, 'description': 'Standard settings for older cameras', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 200, 'ctype': 'int', 'type': 'int', 'name': 'Legacy'}, {'srcline': 28, 'description': 'Enable all filters that are available for this camera', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 255, 'ctype': 'int', 'type': 'int', 'name': 'Full'}, {'srcline': 29, 'description': 'Value returned by getFilterLevel if the processing parameters differ from all of the presets', 'srcfile': '/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg', 'cconsttype': 'const int', 'value': 256, 'ctype': 'int', 'type': 'int', 'name': 'Custom'}]}", &pico_flexx_driverConfig::filter_level)));
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(pico_flexx_driverConfig::AbstractGroupDescriptionConstPtr(new pico_flexx_driverConfig::GroupDescription<pico_flexx_driverConfig::DEFAULT, pico_flexx_driverConfig>(Default)));
//#line 366 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<pico_flexx_driverConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<pico_flexx_driverConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<pico_flexx_driverConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    pico_flexx_driverConfig __max__;
    pico_flexx_driverConfig __min__;
    pico_flexx_driverConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const pico_flexx_driverConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static pico_flexx_driverConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &pico_flexx_driverConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const pico_flexx_driverConfig &pico_flexx_driverConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const pico_flexx_driverConfig &pico_flexx_driverConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const pico_flexx_driverConfig &pico_flexx_driverConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<pico_flexx_driverConfig::AbstractParamDescriptionConstPtr> &pico_flexx_driverConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<pico_flexx_driverConfig::AbstractGroupDescriptionConstPtr> &pico_flexx_driverConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const pico_flexx_driverConfigStatics *pico_flexx_driverConfig::__get_statics__()
  {
    const static pico_flexx_driverConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = pico_flexx_driverConfigStatics::get_instance();

    return statics;
  }

//#line 8 "/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg"
      const int pico_flexx_driver_MODE_9_5FPS_2000 = 0;
//#line 9 "/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg"
      const int pico_flexx_driver_MODE_9_10FPS_1000 = 1;
//#line 10 "/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg"
      const int pico_flexx_driver_MODE_9_15FPS_700 = 2;
//#line 11 "/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg"
      const int pico_flexx_driver_MODE_9_25FPS_450 = 3;
//#line 12 "/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg"
      const int pico_flexx_driver_MODE_5_35FPS_600 = 4;
//#line 13 "/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg"
      const int pico_flexx_driver_MODE_5_45FPS_500 = 5;
//#line 14 "/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg"
      const int pico_flexx_driver_MODE_MIXED_30_5 = 6;
//#line 15 "/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg"
      const int pico_flexx_driver_MODE_MIXED_50_5 = 7;
//#line 16 "/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg"
      const int pico_flexx_driver_Low_Noise_Extended = 8;
//#line 17 "/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg"
      const int pico_flexx_driver_Fast_Acquisition = 9;
//#line 20 "/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg"
      const int pico_flexx_driver_MANUAL = 0;
//#line 21 "/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg"
      const int pico_flexx_driver_AUTOMATIC = 1;
//#line 26 "/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg"
      const int pico_flexx_driver_Off = 0;
//#line 27 "/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg"
      const int pico_flexx_driver_Legacy = 200;
//#line 28 "/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg"
      const int pico_flexx_driver_Full = 255;
//#line 29 "/home/sarrasor/Documents/Projects/Camera_Stabilization/Camera/catkin_ws/src/pico_flexx_driver/cfg/pico_flexx_driver.cfg"
      const int pico_flexx_driver_Custom = 256;
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __PICO_FLEXX_DRIVERRECONFIGURATOR_H__
